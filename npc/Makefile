TOPNAME = top


############################## Verilator Check #####################################

# Check for sanity to avoid later confusion
ifneq ($(words $(CURDIR)),1)
	$(error Unsupported: GNU Make cannot build in directories containing spaces, build elsewhere: '$(CURDIR)')
endif

# If $VERILATOR_ROOT isn't in the environment, we assume it is part of a
# package install, and verilator is in your path. Otherwise find the binary
# relative to $VERIALTOR_ROOT (such as when inside the git source).
ifeq ($(VERILATOR_ROOT),)
VERILATOR = verilator
else
export VERILATOR_ROOT
VERILATOR = $(VERILATOR_ROOT)/bin/verilator
endif

####################################################################################



############################### Verilator Flags ####################################

# For best performance
VERILATOR_FLAGS += -O3 --x-assign fast --x-initial fast 
#VERILATOR_FLAGS += --noassert

#Stronger lint warning enabled
VERILATOR_FLAGS += -Wall

# Get C++ output(versus e.g. SystemC or only linting).
VERILATOR_FLAGS += --cc 

# Enable creation of .d dependency files, used for make dependency detection, 
# similar to gcc -MMD option. By default this option os enabled for --cc or 
# --sc models.
VERILATOR_FLAGS += --MMD

# Optimize
# VERILATOR_FLAGS += -Os -x-assign 0

#Make waveforms
VERILATOR_FLAGS += --trace
VERILATOR_FLAGS += --coverage

# Check SystemVerilog assertions
VERILATOR_FLAGS += --assert

# Build model executable/library after Verilation
VERILATOR_FLAGS += --build

####################################################################################

# Sanity check
ifeq ($(wildcard $(NPC_HOME)/csrc/src/nemu-main.c),)
  $(error NPC_HOME=$(NPC_HOME) is not a NPC repo)
endif

# Include variables and rules generated by menuconfig
-include $(NPC_HOME)/csrc/include/config/auto.conf
-include $(NPC_HOME)/csrc/include/config/auto.conf.cmd

remove_quote = $(patsubst "%",%,$(1))

# Extract variabls from menuconfig
GUEST_ISA ?= $(call remove_quote,$(CONFIG_ISA))
ENGINE ?= $(call remove_quote,$(CONFIG_ENGINE))
NAME    = $(GUEST_ISA)-nemu-$(ENGINE)

# Include all filelist.mk to merge file lists
FILELIST_MK = $(shell find ./src -name "filelist.mk")
include $(FILELIST_MK)

# Filter out directories and files in blacklist to obtain the final set of source files
DIRS-BLACKLIST-y += $(DIRS-BLACKLIST)
SRCS-BLACKLIST-y += $(SRCS-BLACKLIST) $(shell find $(DIRS-BLACKLIST-y) -name "*.c")
SRCS-y += $(shell find $(DIRS-y) -name "*.c")
SRCS = $(filter-out $(SRCS-BLACKLIST-y),$(SRCS-y))

# Extract compiler and options from menuconfig
CC = $(call remove_quote,$(CONFIG_CC))
CFLAGS_BUILD += $(call remove_quote,$(CONFIG_CC_OPT))
CFLAGS_BUILD += $(if $(CONFIG_CC_LTO),-flto,)
CFLAGS_BUILD += $(if $(CONFIG_CC_DEBUG),-Og -ggdb3,)
CFLAGS_BUILD += $(if $(CONFIG_CC_ASAN),-fsanitize=address,)
CFLAGS_TRACE += -DITRACE_COND=$(if $(CONFIG_ITRACE_COND),$(call remove_quote,$(CONFIG_ITRACE_COND)),true)
CFLAGS  += $(CFLAGS_BUILD) $(CFLAGS_TRACE) -D__GUEST_ISA__=$(GUEST_ISA)
LDFLAGS += $(CFLAGS_BUILD)

# Include rules for menuconfig
include $(NPC_HOME)/csrc/scripts/config.mk

# Include rules to build NEMU
include $(NPC_HOME)/csrc/scripts/native.mk


#Create the destination directory

WORK_DIR = $(shell pwd)
BUILD_DIR = $(WORK_DIR)/build
OBJ_DIR = $(BUILD_DIR)/obj_dir
BIN = $(BUILD_DIR)/$(TOPNAME)

default: $(BIN)

$(shell mkdir -p $(BUILD_DIR))


# project source
VS_DIR = $(WORK_DIR)/vsrc
VSRCS = $(shell find $(VS_DIR) -name "*.v")

CS_DIR = $(WORK_DIR)/csrc
CSRCS = $(shell find $(CS_DIR) -name "*.c" -or -name "*.cc" -or -name "*.cpp")

INC_PATH = $(abspath ./csrc/verilator/include)
INCFLAGS = $(addprefix -I, $(INC_PATH))
CFLAGS += $(INCFLAGS)
#CFLAGS += $(shell llvm-config --cxxflags) -fPIE
LDFLAGS += $(shell llvm-config --libs) -l$(NEMU_HOME)/build/riscv64-nemu-interpreter-so
LDFLAGS += -O2 -Og -ggdb3 -ldl -pie -lreadline 
VERILATOR_FLAGS += $(addprefix -CFLAGS , $(CFLAGS)) $(addprefix -LDFLAGS , $(LDFLAGS))

#rules for verilator output

# Name of output object directory
VERILATOR_OUTFLAGS += --Mdir $(OBJ_DIR) 

# Along with sim_main.cpp wrapper file, so the build will create an executable instead of only a library
VERILATOR_OUTFLAGS += --exe

# Specify the name for the executable built if using --exe. Default to the --prefix if not specified
VERILATOR_OUTFLAGS += -o $(abspath $(BIN))

#image file
IMG =

NPCFLAGS += $(ARGS)

NPCFLAGS += $(IMG)

NPCFLAGS += --diff=$(NEMU_HOME)/build/riscv64-nemu-interpreter-so

ifeq ($(WAVE),en)
WAVEFLAGS = gtkwave $(BUILD_DIR)/logs/$(TOPNAME).vcd
endif

$(BIN): $(VSRCS) $(CSRCS) $(NVBOARD_ARCHIVE)
	@rm -rf $(OBJ_DIR)
	@$(VERILATOR) $(VERILATOR_FLAGS) \
		--top-module $(TOPNAME) $^ \
		$(NVBOARD_FLAGS) \
		$(VERILATOR_OUTFLAGS)


all : default

run : sim

sim: $(BIN)
	$(call git_commit, "sim RTL") # DO NOT REMOVE THIS LINE!!!
	@echo "----------------------------------------- RUN -----------------------------------------------"
	@$(BIN) $(NPCFLAGS)
	@echo "---------------------------------------- DONE  ----------------------------------------------"
	$(WAVEFLAGS)

maintainer-copy::
clean mostlyclean distclean maintainer-clean::
	@rm -rf $(BUILD_DIR)
	
include ../Makefile

